<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Insidehand</title>
    <link>/</link>
    <description>Recent content on Insidehand</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 04 Jan 2024 13:47:08 +0800</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>善用Protocol與Protocol Extension</title>
      <link>/posts/2024-01-04-protocol-and-extension/</link>
      <pubDate>Thu, 04 Jan 2024 13:47:08 +0800</pubDate>
      <guid>/posts/2024-01-04-protocol-and-extension/</guid>
      <description>例如說常在SwiftUI List, ForEach裡面用到的Identifiable，&#xA;每次要做比較的時候都要寫一次Equatable的等價關係&#xA;如果善用protocol extenion的話，就可以針對大部分的Identifiable做一個通用的擴充&#xA;所有實作了Identifiable的對象都可以直接擴充Equatable，而不用再寫同樣的程式碼&#xA;注意：這邊只是因為個人開發習慣，所以相同 id 的物件會直接視為相同， 如果開發需要不同的比對方式，請自行修改。切勿照抄。&#xA;舉個例子，如果目前有一個Student，需要進行比對&#xA;classs Student: Equatable, Identifiable { let id = UUID() let name: String } 一般寫完這段程式碼以後，要自己實作Equatable。&#xA;extension Student { static func == (lhs: Student, rhs: Student) -&amp;gt; Bool { lhs.id == rhs.id } } 如此，才能使用==來比對兩個物件是否相等。&#xA;不過，&#xA;如果沒有其他情況要特別比對，每次都只是比對id是否相等，那會產生大量的無用程式碼&#xA;所以這邊就可以用Protocol Extension來簡化程式碼。&#xA;extension Equatable where Self: Identifiable { static func == (lhs: Self, rhs: Self) -&amp;gt; Bool { lhs.id == rhs.id } } 這樣就可以針對所有實作Equatable與Identifiable的物件進行一個預設的擴充。</description>
    </item>
    <item>
      <title>在樹莓派4上執行Swift</title>
      <link>/posts/2024-01-04-swift-on-rpi/</link>
      <pubDate>Thu, 04 Jan 2024 13:47:08 +0800</pubDate>
      <guid>/posts/2024-01-04-swift-on-rpi/</guid>
      <description>之前剛買到樹莓派的時候就有在想，樹莓派上能不能執行Swift&#xA;但是之前 Swift 要在 arm 架構上執行需要用其他人編譯的一個 Swift-arm 版本，&#xA;總覺得沒那麼優雅就放棄了這個想法。&#xA;直到最近閒來無事，想說樹莓派上的一些專案好像很久沒動了，就久違的來研究一下有沒有新的東西可以玩。&#xA;這邊就不廢話了直接上腳本&#xA;#!/bin/bash set -e # check if .az directory exists if [ -d &amp;#34;$HOME/.swift&amp;#34; ]; then echo &amp;#34;Swift is already installed&amp;#34; exit 1 fi wget https://download.swift.org/swift-5.9.2-release/ubuntu2004-aarch64/swift-5.9.2-RELEASE/swift-5.9.2-RELEASE-ubuntu20.04-aarch64.tar.gz echo &amp;#34;Unzip swift-5.9.2&amp;#34; tar xzf swift-5.9.2-RELEASE-ubuntu20.04-aarch64.tar.gz echo &amp;#34;Rename swift-5.9.2 to swift-5.9.2&amp;#34; mv swift-5.9.2-RELEASE-ubuntu20.04-aarch64 swift-5.9.2 echo &amp;#34;Move swift-5.9.2 to .swift&amp;#34; mv swift-5.9.2 &amp;#34;$HOME/.swift/&amp;#34; echo &amp;#34;Remove zip file&amp;#34; rm swift-5.9.2-RELEASE-ubuntu20.04-aarch64.tar.gz echo &amp;#34;Add swift to path&amp;#34; export PATH=$PATH:$HOME/.</description>
    </item>
    <item>
      <title>iOS的OTA發布</title>
      <link>/posts/2022-06-20-ios-ota/</link>
      <pubDate>Mon, 20 Jun 2022 14:34:32 +0800</pubDate>
      <guid>/posts/2022-06-20-ios-ota/</guid>
      <description>常見的iOS發布不外乎為&#xA;App Store上架 Vpp Store上架（大量授權） TestFlight 這三種方式都必須要通過審核（至少在寫文章的時候是這樣）&#xA;那麼，如果只是發布給公司內部的員工使用。&#xA;例如：給測試人員使用，或是給業務等前線單位試用的時候，也要經過審核的話就非常耗費時間。&#xA;所以這邊就説說另外一種方式，可以不用通過Apple審核也可以進行發布的方式：Ad Hoc&#xA;使用Ad Hoc有一個前提，那就是目標手機必須要在開發者帳號下登記過。&#xA;所以要先檢查provisioning profile中有沒有手機的UDID。&#xA;2024註：&#xA;這邊建議手機可以在註冊的時候把UUID跟機型、使用者之類的做個表管理一下&#xA;透過解析 ipa 中的 embbed provision profile 就能比較輕鬆的找出這個 ipa 有哪些人可以安裝&#xA;Ad Hoc 具體發布大概有以下步驟&#xA;打包 輸出 ipa 準備 manifest.plist 準備一個可以存取的網路空間(https) 準備一個網頁或是QRCode 執行下載 上述所有步驟裡面，最麻煩的大概就是一定要走https協定這件事。 所以這部分我覺得分兩個情境來看。&#xA;如果走的是內網下載，之前有試過用python架設https server，是可以用的。 ref of http ref of https&#xA;如果走的是外網下載，但是沒有購買SSL憑證。 那也可以自己建立憑證讓目標手機下載，&#xA;2024註&#xA;後來好像不行了，建議走 Dropbox 吧&#xA;先來説說如果不用腳本的話要怎麼做到這些事情。&#xA;Xcode中選擇Archive，打包的時候記得挑好對應的Build Configuration。 在Organizer中選擇Distribute App，選Ad Hoc，之後就是一路next OTA的選項可以勾也可以不勾，勾起來的話會自動幫你產生一個manifest而已。 將manifest中的路徑、bundle identifier等相關資訊修改完 將ipa, manifest 上傳到網路空間 從網頁或是QR Code中執行下載功能。 整套流程能使用Fastlane去處理，會方便很多。 這邊是把最基礎的手動版本寫出來。</description>
    </item>
    <item>
      <title>新公司應該要注意的開發觀念</title>
      <link>/posts/2022-06-19-%E6%96%B0%E5%85%AC%E5%8F%B8%E6%87%89%E8%A9%B2%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%96%8B%E7%99%BC%E8%A7%80%E5%BF%B5/</link>
      <pubDate>Sun, 19 Jun 2022 17:41:32 +0800</pubDate>
      <guid>/posts/2022-06-19-%E6%96%B0%E5%85%AC%E5%8F%B8%E6%87%89%E8%A9%B2%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%96%8B%E7%99%BC%E8%A7%80%E5%BF%B5/</guid>
      <description>最近被之前的同事找回以前離職的公司去幫忙收拾各種前人留下來的爛攤子&#xA;花了一段時間以後，突然有所體悟。&#xA;在老闆、主管、工程師都是新手的情況下，&#xA;在一個公司是新創、員工是新手、老闆不懂技術狀況下&#xA;一起合作下去是有一定程度上的難處的。&#xA;這邊想說也想說做個簡單的記錄，讓自己以後有些資料可以參考。 也希望這些資料可以對其他人產生幫助。&#xA;不過這邊都是以工程師的角度出發， 對於一個資方要怎麼面對勞方我就沒輒了啊。&#xA;關於產品 工程師基本也等於魔術師，基本上就是把想像中的產品具現化出來。 能夠透過一些包裝、手法讓使用者有完全不一樣的使用體驗。&#xA;但工程師不是魔法師，並不能夠透過念咒來無中生有，跳過研發直接變出產品。 工程師也不會通靈，並不知道客戶、老闆到底想要什麼東西。&#xA;所以在跟工程師討論產品開發的過程中，記得不要畫餅，那是慰留工程師的時候才要說的。&#xA;直接講說希望產品具備什麼功能、想要長什麼樣子、要返回什麼樣的資料就好了。&#xA;當然這邊也並不是說要細化到每一個細節，包含畫面什麼顏色，資料要有哪些屬性等等。 有些規劃還是要由工程師來完成的。&#xA;舉個例子吧，這間公司的老闆常常說「要做一個某某產品」，但是具體的細節一概不知。 包含目標客群有哪些、需要用到哪些技術、預計什麼時候上市。&#xA;這在大公司可以，但是在小公司不行。&#xA;因為在大公司有其他的主管負責分析、研究、規劃等功能，有資源能夠投入，失敗了也並不會影響到公司的生計。&#xA;小公司一旦賭錯，整個公司都會直接陪進去。&#xA;至少，大方向要給出來。線上的還是離線的，賣點是硬體還是軟體，商用的還是民用的。&#xA;關於文件 所有產品、功能在具現化的過程都是不斷地溝通討論。 產品在具現化的過程中必須要留下一些資料。 基本的就是研究數據、使用情境、開發環境。&#xA;這部分都統稱為「文件」&#xA;文件的撰寫與程式碼的註解基本保持一個原則： 「不要告訴我What，告訴我Why。」&#xA;舉個「沒用」的例子&#xA;// 設定背景顏色，如果someCondition為真為黑色，為假則是藍色 view.background = someCondition ? .black : .blue 這種註解，不寫會更好。因為程式碼就能看得出來。 程式碼看不出來的是：「為什麼是藍色跟黑色」。&#xA;開發過程中留下的文件也一樣。&#xA;寫下「為什麼這樣寫」比起「這裡寫了什麼」更為重要。&#xA;開發文件一定要留。可以不用畫多專業的UML圖、做多精美的PPT、Word。 但至少這功能想表達什麼要寫個文件。&#xA;關於程式碼 對於程式碼來說，一定要有一套Coding Style的工具，而且共同開發同一個專案的工程師必須要認同這裡面的一些規則。&#xA;至於Coding Style工具的選擇，基本上每套語言幾乎都會有屬於自己的lint工具以及官方的推薦的naming規則。&#xA;套用style的時機，可以設計在IDE要build code的時候，或是版控commit之前。&#xA;程式碼有幾個注意點：&#xA;註解掉的程式碼請直接刪除，請用版控保護你的程式碼，而不是靠註解掉的程式碼。 IDE自動產生的註解記得拿掉，例如說前人有很多的TODO: //Auto generate method stub留在那邊，不知道為什麼。 不要留下`20220603 modified這樣子的程式碼在上面。除了告訴後面的人你不會用版控以外，並沒有任何幫助。 變數命名不要命一些aa bb，也不要留一堆print(++++)之類的東西 不要在程式碼裡面留下常數，全部都請拿去定義。 3.14請定義成pi errorCode請定義成有意義的名稱 關於版本控制 版本控制，我現在的理解就是：「所有的記錄都可以被追蹤」</description>
    </item>
    <item>
      <title>Kobo Nickel Menu的用法</title>
      <link>/posts/2021-11-11-kobo-nickel-menu%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 11 Nov 2021 16:07:08 +0800</pubDate>
      <guid>/posts/2021-11-11-kobo-nickel-menu%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>如果要用kobo來看txt或是從calibre導入書籍有諸多不便，&#xA;有聽說其他閱讀軟體可以抓但是有點懶得弄。&#xA;後來看到大神的blog，有統整了怎麼安裝第三方閱讀器，就順便抓了一下。&#xA;Koreader功能是真的多，但是相對的電力也是噴很快。不過書本的啟動速度還是比官方慢了一點。&#xA;但是傳資料還是一個痛點。&#xA;經歷各種不方便，後來無意中發現已經有大神寫好一個工具方便使用，那就是Nickel Menu 這就是本篇的重點。&#xA;基本上先參考這個連結來安裝第三方閱讀器，具體要安裝哪一個就看個人需求。 安裝第三方閱讀器&#xA;安裝完以後右下角會出現一個Nickel Menu的功能選項，裡面的選項是可以自訂的。下面會說明&#xA;流程概略是這樣：&#xA;安裝第三方閱讀器 打開KOReader 在KOReader中打開SSH Server 連線進Kobo，進到/mnt/onboard/.adds/nm資料夾 建立一個檔案，檔名自訂，不要加上副檔名不確定加了會怎麼樣，可以自行嘗試，概不負責啊 加入想要的命令 整體操作大致流程是這樣，前三點就不說了，直接從第四點往下講&#xA;進到/mnt/onboard/.adds/nm這邊後，裡面基本上會有一個doc檔， 裡面就是文件說明。&#xA;建議可以用cp複製一份以後，直接用vi或是nano來編輯。 下面有很多的範例可供參考&#xA;這邊列一些我覺得比較實用的&#xA;# Reboot menu_item :main :Reboot :power :reboot # Refresh library menu_item :main :Import books :nickel_misc :rescan_books_full # Force Wifi On/Off menu_item :main :Force Wi-Fi On (toggle) :nickel_setting :toggle:force_wifi # Toggle Telnet menu_item :main :Telnet (toggle) :cmd_output :500:quiet :/usr/bin/pkill -f &amp;#34;^/usr/bin/tcpsvd -E 0.0.0.0 2023&amp;#34; chain_success:skip:5 chain_failure :cmd_spawn :quiet :/bin/mount -t devpts | /bin/grep -q /dev/pts || { /bin/mkdir -p /dev/pts &amp;amp;&amp;amp; /bin/mount -t devpts devpts /dev/pts; } chain_success :cmd_spawn :quiet :exec /usr/bin/tcpsvd -E 0.</description>
    </item>
    <item>
      <title>Git常用命令筆記</title>
      <link>/posts/2021-11-10-git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AD%86%E8%A8%98/</link>
      <pubDate>Wed, 10 Nov 2021 23:47:08 +0800</pubDate>
      <guid>/posts/2021-11-10-git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AD%86%E8%A8%98/</guid>
      <description>Git常用命令筆記</description>
    </item>
    <item>
      <title>EnterHealth Support</title>
      <link>/posts/apps/enterhealth/support/</link>
      <pubDate>Tue, 09 Nov 2021 19:18:33 +0800</pubDate>
      <guid>/posts/apps/enterhealth/support/</guid>
      <description>EnterHealth support</description>
    </item>
    <item>
      <title>EnterHealth Terms</title>
      <link>/posts/apps/enterhealth/terms_and_privacy_policy/</link>
      <pubDate>Tue, 09 Nov 2021 19:18:33 +0800</pubDate>
      <guid>/posts/apps/enterhealth/terms_and_privacy_policy/</guid>
      <description>EnterHealth terms and privacy policy</description>
    </item>
    <item>
      <title>LooPlayer privacy term</title>
      <link>/posts/apps/looplayer/privacy_policy/</link>
      <pubDate>Tue, 09 Nov 2021 19:18:33 +0800</pubDate>
      <guid>/posts/apps/looplayer/privacy_policy/</guid>
      <description>LooPlayer support</description>
    </item>
    <item>
      <title>Requestflow Support</title>
      <link>/posts/apps/requestflow/privacy_policy/</link>
      <pubDate>Tue, 09 Nov 2021 19:18:33 +0800</pubDate>
      <guid>/posts/apps/requestflow/privacy_policy/</guid>
      <description>Requestflow support</description>
    </item>
    <item>
      <title>如何快速找到Simulator的Document位置</title>
      <link>/posts/2021-11-09-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%89%BE%E5%88%B0simulator%E7%9A%84document%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Tue, 09 Nov 2021 19:18:33 +0800</pubDate>
      <guid>/posts/2021-11-09-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%89%BE%E5%88%B0simulator%E7%9A%84document%E4%BD%8D%E7%BD%AE/</guid>
      <description>&lt;h1 id=&#34;如何快速找到simulator的document位置&#34;&gt;如何快速找到Simulator的Document位置&lt;/h1&gt;&#xA;</description>
    </item>
    <item>
      <title>另外一種方式的依賴控制</title>
      <link>/posts/2021-10-11-%E5%8F%A6%E5%A4%96%E4%B8%80%E7%A8%AE%E6%96%B9%E5%BC%8F%E7%9A%84%E4%BE%9D%E8%B3%B4%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 11 Oct 2021 17:41:32 +0800</pubDate>
      <guid>/posts/2021-10-11-%E5%8F%A6%E5%A4%96%E4%B8%80%E7%A8%AE%E6%96%B9%E5%BC%8F%E7%9A%84%E4%BE%9D%E8%B3%B4%E6%8E%A7%E5%88%B6/</guid>
      <description>什麼是依賴，為什麼要管理？ 任何你不能控制的物件，都是隱藏的依賴&#xA;具體來說，如果程式完全不寫測試，那麼其實就不用考慮依賴的問題。&#xA;要管理依賴的理由在於給測試一個介入的途徑。&#xA;例如說有一個物件是用來追蹤聖誕老人，裡面判斷他有沒有上班。&#xA;struct SantaClausTracker { func isWorking() -&amp;gt; Bool { let today = Date() let month = Calendar.current.components(.month, today) let day = Calendar.current.components(.day, today) return month == 12 &amp;amp;&amp;amp; day == 25 } } 顯然，要這個方法回傳true的話，就只能在聖誕節當天進行測試。 其他日子回傳都是false。&#xA;這個方法裡面有兩個依賴，一個是Date()，另一個則是Calendar.current。 如果想要把這些依賴變得可控，那麼就是要透過外部傳入。也就是依賴注入（dependency injection）&#xA;傳統的方法有三：&#xA;建構子注入 屬性注入 方法參數注入 名稱應該足以描述相對應的行為，就不多贅述了。&#xA;換言之，在程式碼中，只要是使用的物件，都要記得可以替換。 舉個例子&#xA;(X func somefunction() { Date() } (O func somefunction(date: Date) { date } (X func somefunction() { URLSession.share } (🔺 func somefunction(session: URLSession) { session } 那麼，顯然會出現的問題就是「依賴要怎麼來」</description>
    </item>
    <item>
      <title>關於GCD的一些筆記-1</title>
      <link>/posts/2020-06-29-gcd%E7%AD%86%E8%A8%98-01/</link>
      <pubDate>Mon, 29 Jun 2020 19:18:33 +0800</pubDate>
      <guid>/posts/2020-06-29-gcd%E7%AD%86%E8%A8%98-01/</guid>
      <description>關於GCD的一些筆記</description>
    </item>
    <item>
      <title>SSH 基本設定</title>
      <link>/posts/2020-06-28-ssh-%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A/</link>
      <pubDate>Sun, 28 Jun 2020 18:34:47 +0800</pubDate>
      <guid>/posts/2020-06-28-ssh-%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A/</guid>
      <description>ssh到GitHub的時候，使用私鑰進行驗證</description>
    </item>
    <item>
      <title>Hello World</title>
      <link>/posts/2020-06-28-hello-world/</link>
      <pubDate>Sun, 28 Jun 2020 16:06:07 +0800</pubDate>
      <guid>/posts/2020-06-28-hello-world/</guid>
      <description>Hello Hugo</description>
    </item>
    <item>
      <title></title>
      <link>/drafts/2022-06-20-%E5%B7%A5%E7%A8%8B%E5%B8%AB%E6%87%89%E8%A9%B2%E5%85%B7%E5%82%99%E7%9A%84%E6%8A%BD%E8%B1%A1%E5%8C%96%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/drafts/2022-06-20-%E5%B7%A5%E7%A8%8B%E5%B8%AB%E6%87%89%E8%A9%B2%E5%85%B7%E5%82%99%E7%9A%84%E6%8A%BD%E8%B1%A1%E5%8C%96%E6%A6%82%E5%BF%B5/</guid>
      <description>用Aido &amp;amp; Aido baby的例子來說明抽象化的概念</description>
    </item>
    <item>
      <title></title>
      <link>/drafts/2024-01-05-raspberry-pi-usb-gadget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/drafts/2024-01-05-raspberry-pi-usb-gadget/</guid>
      <description>https://www.hardill.me.uk/wordpress/2019/11/02/pi4-usb-c-gadget/</description>
    </item>
    <item>
      <title></title>
      <link>/drafts/2024-01-05-ssh-only-via-rsa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/drafts/2024-01-05-ssh-only-via-rsa/</guid>
      <description>sudo vim /etc/hosts.allow&#xA;/etc/hosts.allow sshd: 192.168.50. sshd: 101.9.100.254&#xA;sudo vim /etc/hosts.deny&#xA;sudo vim /etc/ssh/sshd_config PubkeyAuthentication yes PasswordAuthentication no&#xA;sudo /etc/init.d/ssh restart</description>
    </item>
    <item>
      <title></title>
      <link>/drafts/data-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/drafts/data-model/</guid>
      <description>JSON 開發觀念 不要用underline之類的方式來作為JSON的key&#xA;如果有多個底線相關的key，就應該考慮用object封裝起來。&#xA;{ &amp;#34;SomeKeyTitle&amp;#34;: &amp;#34;Value&amp;#34;, &amp;#34;SomeKeyNote&amp;#34;: { &amp;#34;SomeKeyArray&amp;#34;: [ { &amp;#34;someKey_node_id&amp;#34;: &amp;#34;Value&amp;#34;, &amp;#34;someKey_list_id&amp;#34;: &amp;#34;Value&amp;#34;, &amp;#34;otherKey_type&amp;#34;: &amp;#34;Value&amp;#34;, &amp;#34;otherKey_time&amp;#34;: &amp;#34;Value&amp;#34;, } ] }, } 改成&#xA;{ &amp;#34;SomeKey&amp;#34;: { &amp;#34;Title&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Notes&amp;#34;: { &amp;#34;Array&amp;#34;: [ { &amp;#34;nodeId&amp;#34;: &amp;#34;Value&amp;#34;, &amp;#34;listId&amp;#34;: &amp;#34;Value&amp;#34;, &amp;#34;otherKey&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;Value&amp;#34;, &amp;#34;time&amp;#34;: &amp;#34;Value&amp;#34; } } ] } } } 既然一個物件裡面只裝著陣列，那爲什麼不直接抽出來將Value作為陣列？ { &amp;#34;SomeKey&amp;#34;: { &amp;#34;Title&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Notes&amp;#34;: [ { &amp;#34;nodeId&amp;#34;: &amp;#34;Value&amp;#34;, &amp;#34;listId&amp;#34;: &amp;#34;Value&amp;#34;, &amp;#34;otherKey&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;Value&amp;#34;, &amp;#34;time&amp;#34;: &amp;#34;Value&amp;#34; } }, { xxx } ] } } </description>
    </item>
    <item>
      <title></title>
      <link>/drafts/gitbook%E6%9E%B6%E8%A8%AD%E9%81%8E%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/drafts/gitbook%E6%9E%B6%E8%A8%AD%E9%81%8E%E7%A8%8B/</guid>
      <description>Gitbook架設 Part 1 根據目前查到的資料，似乎線上版有一些微微妙妙的問題， 所以這邊打算採用自己架設的做法。&#xA;因為文件都散落在各個MD檔之中，想說要找找一個方便地管理工具 有很多東西因為以前比較少碰到，所以也算是粗略做個記錄。&#xA;以下是踩坑過程。&#xA;安裝yarn 要安裝Gitbook的時候，網路上搜尋到的是用npm來安裝。 然後莫名的就搜尋到新的管理工具yarn&#xA;秉持著有新的就用新的原則，就學著用新的工具來安裝看看。&#xA;brew install yarn 然後就是安裝gitbook套件&#xA;yarn global add gitbook gitbook-cli 因為有很多地方都打算導入gitbook來管理文件，所以就選用global&#xA;node 與 nvm 然後按照教學輸入&#xA;gitbook init 之後就就很順利地炸了。error log如下&#xA;warn: no summary file in this book info: create SUMMARY.md TypeError [ERR_INVALID_ARG_TYPE]: The &amp;#34;data&amp;#34; argument must be of type string or an instance of Buffer, TypedArray, or DataView. Received an instance of Promise 發現是node的版本太新，可以用node -v來檢查當前的node版本。&#xA;於是就開始研究nvm的使用方式。&#xA;nvm: 管理Node版本的工具 使用homebrew來安裝nvm&#xA;brew install nvm 安裝成功後有一些環境變數要設定到.</description>
    </item>
    <item>
      <title></title>
      <link>/drafts/mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/drafts/mysql/</guid>
      <description>要放權限給使用者（帳號），不然會查不到。 GRANT ALL PRIVILEGES ON databaseName.tableName ( or * ) TO &amp;lsquo;username&amp;rsquo;@&amp;lsquo;host&amp;rsquo;;</description>
    </item>
    <item>
      <title></title>
      <link>/drafts/nvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/drafts/nvm/</guid>
      <description>Node &amp;amp; NVM // 檢查線上版本 nvm ls-remote // 安裝node // 安裝特定版本 nvm install v13.14.0 // 安裝穩定版 nvm install stable // 檢查已經安裝過的node列表 nvm ls // 移除node nvm uninstall v14.19.2 // 切換版本 nvm use v13.14.0 NPM yarn&#xA;npm&#xA;package.json&#xA;package-lock.json&#xA;Ref https://medium.com/哆啦實驗室/node-js管理神器nvm-b6acfca44ea5 https://segmentfault.com/a/1190000019037664 https://blog.csdn.net/zheng18237111686/article/details/113878602&#xA;npm http://dreamerslab.com/blog/tw/npm-basic-commands/&#xA;yarn https://segmentfault.com/a/1190000008489881 https://simpleit.rocks/javascript/yarn/how-to-search-packages-using-yarn/ https://yarnpkg.com/cli/init https://ithelp.ithome.com.tw/articles/10191888 https://ithelp.ithome.com.tw/articles/10191745 http://nodejs.cn/learn/the-package-json-guide&#xA;LTS Long Time Support Node https://www.796t.com/post/bG80Ng==.html</description>
    </item>
    <item>
      <title></title>
      <link>/drafts/protocol-extension-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/drafts/protocol-extension-/</guid>
      <description>Extension for Protocol 先說結論： 善用protocol來實作一些功能&#xA;Todo: [WWDC talk 連結]&#xA;在傳統的OOP觀念中，基本上要最小化程式碼重複的方法就是透過繼承。&#xA;Swift 是針對 protocol 來設計的 </description>
    </item>
    <item>
      <title></title>
      <link>/drafts/redux-in-swift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/drafts/redux-in-swift/</guid>
      <description>Redux in SwiftUI 透過泛型來限制型別&#xA;針對sub-view的資料處理 sub-state &amp;amp; sub-action &amp;amp; sub-reducer Store derived View -&amp;gt; sub-view 的 Connector </description>
    </item>
    <item>
      <title></title>
      <link>/drafts/shell-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/drafts/shell-command/</guid>
      <description>檢查MacBook的SSD使用狀況 sudo smartctl —all /dev/disk0</description>
    </item>
    <item>
      <title></title>
      <link>/drafts/swiftui%E7%9A%84identifiable-equable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/drafts/swiftui%E7%9A%84identifiable-equable/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>/drafts/%E4%BD%BF%E7%94%A8%E6%A2%9D%E6%AC%BE-%E8%8B%B1%E6%96%87%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/drafts/%E4%BD%BF%E7%94%A8%E6%A2%9D%E6%AC%BE-%E8%8B%B1%E6%96%87%E7%89%88/</guid>
      <description>Terms of Use EnterHealth (following call &amp;ldquo;Eh&amp;rdquo; or &amp;ldquo;we&amp;rdquo;) provide to read and write blood pressure, heart rate, etc. health record from Apple.Inc Health app. (following call &amp;ldquo;Health app&amp;rdquo;)&#xA;All that data will store in Health app&#xA;When you delete record in Eh, we will backup that record in local to make sure you can restore it any time.&#xA;If you don&amp;rsquo;t want to restore this record you can delete permanently.</description>
    </item>
    <item>
      <title></title>
      <link>/drafts/%E6%9C%AA%E5%91%BD%E5%90%8D-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/drafts/%E6%9C%AA%E5%91%BD%E5%90%8D-3/</guid>
      <description>https://stackoverflow.com/questions/1783405/how-do-i-check-out-a-remote-git-branch&#xA;https://en.wikipedia.org/wiki/GraalVM&#xA;https://www.zhihu.com/question/430792464&#xA;https://benjr.tw/98233&#xA;https://www.cnblogs.com/xiaowuzi/p/3485302.html&#xA;https://docs.spring.io/spring-data/jpa/docs/current/reference/html/</description>
    </item>
    <item>
      <title></title>
      <link>/memo/git-%E9%87%8D%E6%96%B0%E5%91%BD%E5%90%8D%E9%81%A0%E7%AB%AF%E5%88%86%E6%94%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/memo/git-%E9%87%8D%E6%96%B0%E5%91%BD%E5%90%8D%E9%81%A0%E7%AB%AF%E5%88%86%E6%94%AF/</guid>
      <description>Git rename remote branch Git checkout -b localBranchname origin/remoteBranchName Git push origin &amp;ndash;delete remoteBranchName Git push origin -u localBranchName OR 尚未測試過&#xA;Git push origin : remoteBranchName newBranchName Git push origin -u newBranchName </description>
    </item>
    <item>
      <title></title>
      <link>/memo/git-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/memo/git-command/</guid>
      <description>Git 主幹名稱 因為SJW的不懈努力，git的主幹名稱從master改成main了&#xA;如果是早期的config還是使用master的命名的話，git會建議你更換名稱。&#xA;更換git預設的主幹名稱&#xA;git config &amp;ndash;global init.defaultBranch &amp;lt;#NewMainBranchName#&amp;gt;&#xA;更換當前主幹/分支名稱&#xA;git branch -m main</description>
    </item>
    <item>
      <title></title>
      <link>/memo/git%E4%BD%BF%E7%94%A8personalaccesstoken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/memo/git%E4%BD%BF%E7%94%A8personalaccesstoken/</guid>
      <description>Git 在Github上設定personal access token 如果要做git clone的時候，要用https下載 這時候要打密碼，如果不記起來的話密碼可能就不能用第二次了。 # 要記憶密碼的話 git config --global credential.helper cache # 如果要清除掉設定的話 git config --global --unset credential.helper </description>
    </item>
    <item>
      <title></title>
      <link>/memo/%E5%B0%8E%E5%85%A5swiftlint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/memo/%E5%B0%8E%E5%85%A5swiftlint/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>/memo/%E7%94%A8terminal%E5%9F%B7%E8%A1%8Cxcode%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/memo/%E7%94%A8terminal%E5%9F%B7%E8%A1%8Cxcode%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6/</guid>
      <description> PROJECT=xxxx SCHEME=xxxx xcodebuild test \ -project $PROJECT.proj \ -scheme $SCHEME \ -destination &amp;#34;platform=iOS Simulator,OS=15.1,name=iPhone 8&amp;#34; \ -enable xcodebuild \ -project $PROJECT.xcodeproj \ -scheme $SCHEME \ -destination &amp;#34;platform=iOS Simulator,name=iPhone 8,OS=15.2&amp;#34; \ -enableCodeCoverage YES test // view xcresult&#xA;brew install XCTestHtmlReport/xchtmlreport/xchtmlreport </description>
    </item>
    <item>
      <title></title>
      <link>/memo/%E9%97%9C%E6%96%BCssh%E7%99%BB%E5%85%A5%E9%80%99%E5%9B%9E%E4%BA%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/memo/%E9%97%9C%E6%96%BCssh%E7%99%BB%E5%85%A5%E9%80%99%E5%9B%9E%E4%BA%8B/</guid>
      <description>關於ssh登入這回事 交接資料中有許多東西都是與帳號密碼相關， 但是在交接資料中可以看到帳號密碼是一件非常詭異的事情。&#xA;這就讓我去思考遠端連線到底應該要怎麼做才會是正確的。&#xA;帳號跟密碼只應該由MIS保留，且取得需要有相關授權之類的&#xA;MIS應該負責創建使用者的RSA金鑰&#xA;由MIS負責配發金鑰，讓使用者能夠進行連線或是相關操作。&#xA;當同事離職以後，也應該由MIS負責將對應的金鑰從遠端機器中刪除。</description>
    </item>
  </channel>
</rss>
