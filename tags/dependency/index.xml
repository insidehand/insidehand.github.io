<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dependency on Insidehand</title>
    <link>/tags/dependency/</link>
    <description>Recent content in Dependency on Insidehand</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 11 Oct 2021 17:41:32 +0800</lastBuildDate>
    <atom:link href="/tags/dependency/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>另外一種方式的依賴控制</title>
      <link>/posts/2021-10-11-%E5%8F%A6%E5%A4%96%E4%B8%80%E7%A8%AE%E6%96%B9%E5%BC%8F%E7%9A%84%E4%BE%9D%E8%B3%B4%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 11 Oct 2021 17:41:32 +0800</pubDate>
      <guid>/posts/2021-10-11-%E5%8F%A6%E5%A4%96%E4%B8%80%E7%A8%AE%E6%96%B9%E5%BC%8F%E7%9A%84%E4%BE%9D%E8%B3%B4%E6%8E%A7%E5%88%B6/</guid>
      <description>什麼是依賴，為什麼要管理？ 任何你不能控制的物件，都是隱藏的依賴&#xA;具體來說，如果程式完全不寫測試，那麼其實就不用考慮依賴的問題。&#xA;要管理依賴的理由在於給測試一個介入的途徑。&#xA;例如說有一個物件是用來追蹤聖誕老人，裡面判斷他有沒有上班。&#xA;struct SantaClausTracker { func isWorking() -&amp;gt; Bool { let today = Date() let month = Calendar.current.components(.month, today) let day = Calendar.current.components(.day, today) return month == 12 &amp;amp;&amp;amp; day == 25 } } 顯然，要這個方法回傳true的話，就只能在聖誕節當天進行測試。 其他日子回傳都是false。&#xA;這個方法裡面有兩個依賴，一個是Date()，另一個則是Calendar.current。 如果想要把這些依賴變得可控，那麼就是要透過外部傳入。也就是依賴注入（dependency injection）&#xA;傳統的方法有三：&#xA;建構子注入 屬性注入 方法參數注入 名稱應該足以描述相對應的行為，就不多贅述了。&#xA;換言之，在程式碼中，只要是使用的物件，都要記得可以替換。 舉個例子&#xA;(X func somefunction() { Date() } (O func somefunction(date: Date) { date } (X func somefunction() { URLSession.share } (🔺 func somefunction(session: URLSession) { session } 那麼，顯然會出現的問題就是「依賴要怎麼來」</description>
    </item>
  </channel>
</rss>
